@using Wbd.Pillars.ClassLib.Player
@inject PlayerService PlayerService
@inject ILogger<CharacterChoice> _logger


@if (_isLoading)
{
    <p>Loading characters...</p>
}
else if (!_saveExists)
{
    <h3>Let's Begin</h3>
    <button class="btn btn-primary" @onclick="OnCreatePlayerSlotsAsync">Start Your Adventure</button>
}
else
{
    <h3>Choose Your Character</h3>
    <div id="character-choice" class="container">
        <div class="row">
            @for (int i = 0; i < 4; i++)
            {
                <div class="col-6 mb-3">
                    @if (!string.IsNullOrWhiteSpace(_characters[i]?.Name))
                    {
                        <CharacterSelector SlotNumber="@(i + 1)" Character="_characters[i]" />
                    }
                    else
                    {
                        <div class="card h-100 d-flex align-items-center justify-content-center">
                            <div class="card-body text-center">
                                <span class="text-muted">Empty Slot</span>
                                <br />
                                <button class="btn btn-sm btn-outline-primary mt-2" @onclick="OnCreatePlayerSlotsAsync">Create Character</button>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
}

@code {
    private List<PlayerCharacter> _characters = new();
    private bool _isLoading = true;
    private bool _saveExists = false;

    /// <summary>
    /// Loads character slots using PlayerService on component initialization.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await LoadCharactersAsync();
    }

    /// <summary>
    /// Loads player and character data, ensuring exactly four slots.
    /// </summary>
    private async Task LoadCharactersAsync()
    {
        try
        {
            _saveExists = await PlayerService.DoesSaveExistAsync();
            if (_saveExists)
            {
                _logger.LogInformation("Player save exists, loading characters.");
                var player = await PlayerService.LoadPlayerAsync();
                var loaded = player?.Characters ?? new List<PlayerCharacter>();
                // Ensure exactly Data.MaxCharacterSlots
                _characters = loaded.Take(Data.MaxCharacterSlots).ToList();
                while (_characters.Count < Data.MaxCharacterSlots)
                    _characters.Add(new PlayerCharacter());
            }
            else
            {
                _characters = Enumerable.Range(0, Data.MaxCharacterSlots).Select(_ => new PlayerCharacter()).ToList();
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to load characters via PlayerService.");
            _characters = Enumerable.Range(0, Data.MaxCharacterSlots).Select(_ => new PlayerCharacter()).ToList();
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Handler for creating new player slots.
    /// </summary>
    private async Task OnCreatePlayerSlotsAsync()
    {
        _logger.LogInformation("Create player slots requested.");
        await PlayerService.CreateSlotsAsync();
        await LoadCharactersAsync();
    }
}
